import random
import sys

KEYBINDS = {
    'd': "North",
    'a': "West",
    's': "South",
    'h': "East",
    'c': "Lists keybindings",
    'exit': "Exit program"
}

ACTIONS = {
    "North": [ 0, 1 ],
    "West": [ -1, 0 ],
    "South": [ 0, -1 ],
    "East": [ 1, 0 ]
}

ROOM_DESCRIPTIONS = {
        'p': "",
        'x': "The room has already been visited",
        '.': "The room is baren",
        'o': "You fall into the pit of dispair never to come back out",
        '~': "You feel a faint breeze on your cheek",
        'w': "You freeze in your steps at the sight of the Wumpus and are powerless while you watch it consume you",
        's': "A foul odor comes over you",
        'g': "A faint shimmer passed before your eyes as you lay sight on the treasure. Gold"
}

def get_non_00_rand(size):
    x = 0
    y = 0

    while x == 0 and y == 0:
        x = random.randrange(size)
        y = random.randrange(size)

    return [x, y]

class Room(object):
   def  __init__(self, attributes = '.'):
        self.attributes = attributes
        self.visited = False

   def describe_room(self):
        out = []
        
        for type in self.attributes:
            out.append(ROOM_DESCRIPTIONS[type])
        
        return "\n".join(out)

class Cave(object):
    def __init__(self, size = 5, player = Player()):
        self.cave = []
        self.size = size
        
        # Creates all the rooms
        for i in range(size):
            self.cave.append([])

            for j in range(size):
                self.cave[i].append(Room())
        
        # Sets the initial wumpus location
        wumpus_x, wumpus_y = get_non_00_rand(size)
        
        self.cave[wumpus_x][wumpus_y].attributes += 'w'

        self.wumpus_x = wumpus_x
        self.wumpus_y = wumpus_y
        
        for i in [1, -1]:
            new_x = wumpus_x + i
            new_y = wumpus_y + i

            if new_x in range(size):
                self.cave[new_x][wumpus_y].attributes += 's'

            if new_y in range(size):
                self.cave[wumpus_x][new_y].attributes += 's'

        # Sets the gold location
        gold_x = random.randrange(size)
        gold_y = random.randrange(size)

        self.cave[gold_x][gold_y].attributes += 'g'

        self.gold_x = gold_x
        self.gold_y = gold_y
        
        for i in range(size):
            for j in range(size):
                if random.random() < 0.1 and (i != 0 and j != 0):
                    self.cave[i][j].attributes += 'o'

                    for k in [1, -1]:
                        new_x = i + k
                        new_y = j + k

                        if new_x in range(size):
                            self.cave[new_x][j].attributes += 's'
                        
                        if new_y in range(size):
                            self.cave[i][new_y].attributes += 's'

    def gameover(self):
        return self.player_at_gold() or self.player_at_wumpus 

    def player_at_gold(self):
        player = self.player

        return self.cave[player.player_x][player.player_y] == 'g'

    def player_at_wumpus(self):
        player = self.player

        return self.cave[player.player_x][player.player_y] == 'w'

    def player_at_wumpus(self):
        player = self.player

        return self.cave[player.player_x][player.player_y] == 'o'

    def print(self):
        self.player.print()
        self.cave[player.player_x][player.player_y].describe_room()

    def move_player(self, dir = ' '):
        dir = dir.lower()
        
        if dir in KEYBINDS:
            player = self.player
            
            # Movement vectors x and y
            mv_x, mv_y = ACTIONS[KEYBINDS[dir]]
            
            if player.player_x + mv_x in range(self.size) and player.player_y + mv_y in range(self.size):
                self.player.move(mv_x, mv_y)

class Player(object):
    player_x = 0
    player_y = 0

    def __init__(self):
        pass

    def move(self, mv_x = 0, mv_y = 0):
        self.player_x += mv_x
        self.player_y += mv_y

    def print(self):
        print("You are at ({}, {}).".format(self.player_x, self.player_y))

def set_keybinds():
    pass

def print_keybinds():
    for command in KEYBINDS:
        print(": ".join([command, KEYBINDS[command]]))

cave = Cave()

print("Current keybindings:")
print_keybinds()
print("Do you want to change the keybindings? (y/n)", end = "> ")

if input().lower() == 'y':
    set_keybinds()

while not cave.gameover()
    print()
    
    # prints room description
    cave.print()
    print("Input command", end = '> ')

    p_input = input()

    if p_input in "dash":
        cave.move_player(p_input)
    elif p_input == "c":
        print_keybinds()
    elif p_input == "exit":
        sys.exit("Bye!") 
